{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "**知识点:** 为了从数据中学习模型并对其进行推理，我们需要 be able to do inference. Pyro 包含 `pyro.do`，这是 Pearl 的 `do`-operator 的实现，用于因果推断。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "# Pyro 推断简介\n",
    "\n",
    "现代机器学习的许多内容可以理解成近似推断并且使用 Pyro 这样的语言表达出来. To motivate the rest of this tutorial, 让我们为一个简单的物理问题建立一个生成模型，以便我们可以使用 Pyro 的推理机制来解决它。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import torch\n",
    "\n",
    "import pyro\n",
    "import pyro.infer\n",
    "import pyro.optim\n",
    "import pyro.distributions as dist\n",
    "\n",
    "pyro.set_rng_seed(101)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "假设我们试图得到某物的重量，但是我们使用的秤是不可靠的，并且每当我们称量同一物体时会给出稍微变动的读数。我们可以尝试 compensate for this variability by integrating the noisy measurement information with **a guess based on some prior knowledge about the object**, like its density or material properties. 我们用以下概率模型来模拟：\n",
    "\n",
    "$${\\sf weight} \\,  \\sim \\cal {\\sf Normal}({\\mu}, 1) $$\n",
    "$${\\sf measurement} \\, |  {\\sf weight} \\sim {\\sf Normal}({\\sf weight}, 0.75)$$\n",
    "\n",
    "其中，第一个式子表示该物体重量的先验分布，第二个式子表示对其进行测量的结果。该模型对应于以下随机函数："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": [
    "def scale(mu):\n",
    "    weight = pyro.sample(\"weight\", dist.Normal(mu, 1.0))\n",
    "    return pyro.sample(\"measurement\", dist.Normal(weight, 0.75))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": [
    "# Hint for the next section\n",
    "def scale_obs(mu): \n",
    "    weight = pyro.sample(\"weight\", dist.Normal(mu, 1.))\n",
    "    return pyro.sample(\"measurement\", dist.Normal(weight, 0.75), obs=9.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "## 随机函数的条件化\n",
    "\n",
    "概率编程的真正威力是把生成模型对观测数据条件化并且推断产生观测数据的隐变量的能力。在 Pyro 中，we separate the expression of conditioning from its evaluation via inference, 使得我们能够只写一个随机函数 `model` 而对许多不同的样本进行条件化. Pyro suppors constraining a model's internal `sample` statements to be equal to a given set of observations."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "再次考虑称重的例子，也就是 `scale`. 假设 `weight` 的分布参数 `mu = 8.5`, 然后我们得到该物理的一个测量 `measurement = 9.5`. 那么，需要推断的是 `weight` 的后验分布:\n",
    "\n",
    "$$p({\\sf weight} \\, |{\\sf measurement}=9.5 \\,; \\, \\mu=8.5) = \\, ? $$\n",
    "\n",
    "Pyro provides the function `pyro.condition` to allow us to constrain the values of sample statements.  `pyro.condition` 是一个输入是 a model and a dictionary of observations 的高阶函数， 它的输出是 a new model that has the same input and output signatures but always uses the given values at observed `sample` statements:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9.5"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mu = 8.5\n",
    "conditioned_scale = pyro.condition(scale, data={\"measurement\": 9.5})\n",
    "# Input of `pyro.condition`: a model and a dictionary of observations\n",
    "conditioned_scale(mu)\n",
    "# Always uses the given values at observed sample statements!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "因果它就像常规 Python 函数, conditioning can be deferred or parametrized with Python's `lambda` or `def`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": [
    "def deferred_conditioned_scale(measurement, mu):\n",
    "    return pyro.condition(scale, data={\"measurement\": measurement})(mu)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "在某些情况下，直接在 `pyro.sample` 语句中而不是使用 `pyro.condition` 定义条件化可能更方便. `pyro.sample` 的可选参数 `obs` 就是用于定义条件化:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": [
    "def scale_obs(mu):  # equivalent to conditioned_scale above\n",
    "    weight = pyro.sample(\"weight\", dist.Normal(mu, 1.))\n",
    "     # here we condition on measurement == 9.5\n",
    "    return pyro.sample(\"measurement\", dist.Normal(weight, 0.75), obs=9.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "最后，除了用于合并观察数据的 `pyro.condition` 之外，Pyro还包含 `pyro.do`，这是 Pearl 的 `do`-operator 的实现，用于因果推断，其接口与 `pyro.condition` 相同。`condition` and `do` 可以自由混合和组合，使Pyro成为基于模型的因果推断的强大工具。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "## 用指导分布近似后验\n",
    "\n",
    "我们可以使用指导函数(guide function)进行灵活的近似推断。\n",
    "\n",
    "让我们回到 `conditioned_scale`。现在我们有一个对 `measurement` 条件化的模型(model)，于是我们可以使用 Pyro 的近似推理算法来估计 `weight` 已知参数 `mu` 和给定观测数据 `measurement = data` 的后验分布. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": [
    "def scale_obs(mu): \n",
    "    weight = pyro.sample(\"weight\", dist.Normal(mu, 1.))\n",
    "    return pyro.sample(\"measurement\", dist.Normal(weight, 0.75), obs=9.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "Pyro中的推理算法，例如 `pyro.infer.SVI`，允许我们使用任意随机函数，我们将其称为指导函数(*guide functions* or *guides*)，作为近似后验分布， 指导函数必须满足以下两个条件才能成为特定模型的有效近似后验分布： \n",
    "\n",
    "1. 所有的非观测变量抽样语句需要在 model 和 guide 中同时出现。\n",
    "2. 模型分布和指导分布具有相同的输入参数 (input signature).\n",
    "\n",
    "指导函数的作用(或者角色)是：\n",
    "\n",
    "- 作为一个可编程和数据依赖的建议分布(proposal distribution) 用于重要采样, 拒绝采样, 序列蒙特卡罗采样, MCMC, and independent Metropolis-Hastings, and \n",
    "- 作为一个变分分布(variational distributions or inference networks) 用于随机变分推理。 \n",
    "\n",
    "目前，重要性抽样，MCMC和随机变分推断已在 Pyro 中实现，我们计划在将来添加其他算法。\n",
    "\n",
    "\n",
    "尽管指导函数的定义在不同的推断算法中有所不同，但通常应选择 guide function，使其原则上具有足够的灵活性 to closely approximate the distribution over all unobserved `sample`(也就是非条件化的变量) statements in the model. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "在我们的例子 `scale` 中, `weight` 给定参数 `mu` 和观测 `measurement` 的真实后验分布是 $N(9.14, 0.6)$。 (模型非常简单，因此我们可以解析的得到后验分布, for derivation, see for example [Section 3.4 of this book](http://www.stat.cmu.edu/~brian/463-663/week09/Chapter%2003.pdf).)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": [
    "def perfect_guide(mu):\n",
    "    loc =(0.75**2 * mu + 9.5) / (1 + 0.75**2) # 9.14\n",
    "    scale = np.sqrt(0.75**2/(1 + 0.75**2)) # 0.6\n",
    "    return pyro.sample(\"weight\", dist.Normal(loc, scale))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": [
    "# Hint for the next section\n",
    "from torch.distributions import constraints\n",
    "def scale_parametrized_guide_constrained(mu):\n",
    "    a = pyro.param(\"a\", torch.tensor(mu))\n",
    "    b = pyro.param(\"b\", torch.tensor(1.), constraint=constraints.positive)\n",
    "    return pyro.sample(\"weight\", dist.Normal(a, b)) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "## 参数化模型和变分推断\n",
    "\n",
    "Parametrized Stochastic Functions and Variational Inference\n",
    "\n",
    "尽管我们可以写出 `scale` 的精确后验分布，但是总的来说，指定一个近似于任意条件随机函数的后验分布的指导分布是很困难的。实际上，可以计算精确后验的随机函数是很少见的。例如，即使在我们的例子 `scale` 中，如果随机函数的中间过程存在某种非线性，那么可能就是无法计算其精确后验分布:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": [
    "# 随机函数无法计算精确后验分布\n",
    "def intractable_scale(guess):\n",
    "    weight = pyro.sample(\"weight\", dist.Normal(guess, 1.0))\n",
    "    return pyro.sample(\"measurement\", dist.Normal(some_nonlinear_function(weight), 0.75))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "因此我们的做法是使用 top-level function `pyro.param` 来定义一族指导分布 indexed by named parameters, 然后在这族分布中搜索在某种损失意义下最接近真实后验分布的指导分布。这种近似后验推断的方法称为“变分推断”。\n",
    "\n",
    "\n",
    "`pyro.param` 是一个 Pyro's 键值参数存储区(key-value parameter store) 的前端，which is described in more detail in the documentation. 像 `pyro.sample` 一样，`pyro.param` 总是以 name 作为第一个参数来调用。 `pyro.param` 第一次带特定 name 的调用之后, 它把它的参数存储在 parameter store 中, 然后返回该值。之后，当使用该名称进行调用时，它从参数存储区返回值 regardless of any other arguments。这里类似于此处的 `simple_param_store.setdefault` , 但具有一些附加的跟踪和管理功能。\n",
    "\n",
    "\n",
    "\n",
    "```python\n",
    "simple_param_store = {}\n",
    "a = simple_param_store.setdefault(\"a\", torch.randn(1))\n",
    "```\n",
    "\n",
    "For example, we can parametrize `a` and `b` in `scale_posterior_guide` instead of specifying them by hand:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": [
    "def scale_parametrized_guide(mu):\n",
    "    a = pyro.param(\"a\", torch.tensor(mu))\n",
    "    b = pyro.param(\"b\", torch.tensor(1.))\n",
    "    return pyro.sample(\"weight\", dist.Normal(a, torch.abs(b)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "As an aside, note that in `scale_parametrized_guide`, we had to apply `torch.abs` to parameter `b` 是因为正态分布的标准差必须为正; 类似的约束同样适用于其他许多分布的参数. PyTorch 分布库提供了 [约束模块(constraints module)](https://pytorch.org/docs/master/distributions.html#module-torch.distributions.constraints) 用于实现此类约束, and applying constraints to Pyro parameters is as easy as passing the relevant `constraint` object to `pyro.param`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": [
    "from torch.distributions import constraints\n",
    "\n",
    "def scale_parametrized_guide_constrained(mu):\n",
    "    a = pyro.param(\"a\", torch.tensor(mu))\n",
    "    b = pyro.param(\"b\", torch.tensor(1.), constraint=constraints.positive)\n",
    "    return pyro.sample(\"weight\", dist.Normal(a, b))  # no more torch.abs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "Pyro is built to enable *stochastic variational inference*, a powerful and widely applicable class of variational inference algorithms with 三个关键特征: \n",
    "\n",
    "1. 参数都是实数值张量\n",
    "2. 我们使用模型分布和指导分布的 samples of execution histories 来计算损失函数的蒙特卡罗估计\n",
    "3. 我们使用随机梯度下降法搜索最佳参数。 \n",
    "\n",
    "将随机梯度下降与 PyTorch 的 GPU 加速张量数学和自动微分相结合，使我们能够在高维参数空间和大规模数据下进行变分推断。\n",
    "\n",
    "\n",
    "有关 Pyro 的 SVI 功能详细描述参见 [SVI tutorial](svi_part_i.ipynb). "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "## 例子完整代码\n",
    "\n",
    "我们使用变分推断估计 `scale` 在已知参数 $\\mu=8.5$，给定观测 `measurement=9.5` 之后的后验分布:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a =  9.107474327087402\n",
      "b =  0.6285384893417358\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import torch\n",
    "\n",
    "import pyro\n",
    "import pyro.infer\n",
    "import pyro.optim\n",
    "import pyro.distributions as dist\n",
    "pyro.set_rng_seed(101)\n",
    "mu = 8.5\n",
    "\n",
    "def scale(mu):\n",
    "    weight = pyro.sample(\"weight\", dist.Normal(mu, 1.0))\n",
    "    return pyro.sample(\"measurement\", dist.Normal(weight, 0.75))\n",
    "conditioned_scale = pyro.condition(scale, data={\"measurement\": 9.5})\n",
    "\n",
    "def scale_parametrized_guide(mu):\n",
    "    a = pyro.param(\"a\", torch.tensor(mu))\n",
    "    b = pyro.param(\"b\", torch.tensor(1.))\n",
    "    return pyro.sample(\"weight\", dist.Normal(a, torch.abs(b)))\n",
    "\n",
    "pyro.clear_param_store()\n",
    "svi = pyro.infer.SVI(model=conditioned_scale, \n",
    "                     guide=scale_parametrized_guide,\n",
    "                     optim=pyro.optim.SGD({\"lr\": 0.001, \"momentum\":0.1}),\n",
    "                     loss=pyro.infer.Trace_ELBO())\n",
    "\n",
    "losses, a,b  = [], [], []\n",
    "num_steps = 2500\n",
    "for t in range(num_steps):\n",
    "    losses.append(svi.step(mu))\n",
    "    a.append(pyro.param(\"a\").item())\n",
    "    b.append(pyro.param(\"b\").item())\n",
    "    \n",
    "plt.plot(losses)\n",
    "plt.title(\"ELBO\")\n",
    "plt.xlabel(\"step\")\n",
    "plt.ylabel(\"loss\");\n",
    "print('a = ',pyro.param(\"a\").item())\n",
    "print('b = ', pyro.param(\"b\").item())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.subplot(1,2,1)\n",
    "plt.plot([0,num_steps],[9.14,9.14], 'k:')\n",
    "plt.plot(a)\n",
    "plt.ylabel('a')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "plt.ylabel('b')\n",
    "plt.plot([0,num_steps],[0.6,0.6], 'k:')\n",
    "plt.plot(b)\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "**注意，因为我们定义的指导分布和真实后验分布是同一族分布，所以SVI获得的参数非常接近真实参数。**\n",
    "\n",
    "\n",
    "由于优化过程会更新参数存储区中指导分布的参数, 所以一旦我们找到了好的参数, 我们可以将指导分布的样本作为后验样本用于后续任务.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "## 拆解成梯度下降法\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before updated: tensor(8.5000, requires_grad=True) tensor(1., requires_grad=True)\n",
      "After updated: tensor(9.0979, requires_grad=True) tensor(0.6203, requires_grad=True)\n",
      "a =  9.097911834716797\n",
      "b =  0.6202840209007263\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import torch\n",
    "\n",
    "import pyro\n",
    "import pyro.infer\n",
    "import pyro.optim\n",
    "import pyro.distributions as dist\n",
    "pyro.set_rng_seed(101)\n",
    "mu = 8.5\n",
    "\n",
    "def scale(mu):\n",
    "    weight = pyro.sample(\"weight\", dist.Normal(mu, 1.0))\n",
    "    return pyro.sample(\"measurement\", dist.Normal(weight, 0.75))\n",
    "conditioned_scale = pyro.condition(scale, data={\"measurement\": torch.tensor(9.5)})\n",
    "\n",
    "def scale_parametrized_guide(mu):\n",
    "    a = pyro.param(\"a\", torch.tensor(mu))\n",
    "    b = pyro.param(\"b\", torch.tensor(1.))\n",
    "    return pyro.sample(\"weight\", dist.Normal(a, torch.abs(b)))\n",
    "\n",
    "loss_fn = pyro.infer.Trace_ELBO().differentiable_loss\n",
    "\n",
    "pyro.clear_param_store()\n",
    "\n",
    "with pyro.poutine.trace(param_only=True) as param_capture:\n",
    "    loss = loss_fn(conditioned_scale, scale_parametrized_guide, mu)\n",
    "    loss.backward()\n",
    "params = [site[\"value\"].unconstrained() for site in param_capture.trace.nodes.values()]\n",
    "\n",
    "def step(params):\n",
    "    for x in params:\n",
    "        x.data = x.data - lr * x.grad\n",
    "        x.grad.zero_()\n",
    "\n",
    "print(\"Before updated:\", pyro.param('a'), pyro.param('b'))\n",
    "losses, a,b  = [], [], []\n",
    "lr = 0.001\n",
    "num_steps = 1000\n",
    "for t in range(num_steps):\n",
    "    with pyro.poutine.trace(param_only=True) as param_capture:\n",
    "        loss = loss_fn(conditioned_scale, scale_parametrized_guide, mu)\n",
    "        loss.backward()\n",
    "        losses.append(loss.data)\n",
    "    params = [site[\"value\"].unconstrained() for site in param_capture.trace.nodes.values()]\n",
    "\n",
    "    a.append(pyro.param(\"a\").item())\n",
    "    b.append(pyro.param(\"b\").item())\n",
    "    step(params)\n",
    "print(\"After updated:\", pyro.param('a'), pyro.param('b'))\n",
    "\n",
    "\n",
    "plt.plot(losses)\n",
    "plt.title(\"ELBO\")\n",
    "plt.xlabel(\"step\")\n",
    "plt.ylabel(\"loss\");\n",
    "print('a = ',pyro.param(\"a\").item())\n",
    "print('b = ', pyro.param(\"b\").item())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.subplot(1,2,1)\n",
    "plt.plot([0,num_steps],[9.14,9.14], 'k:')\n",
    "plt.plot(a)\n",
    "plt.ylabel('a')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "plt.ylabel('b')\n",
    "plt.plot([0,num_steps],[0.6,0.6], 'k:')\n",
    "plt.plot(b)\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "## 下一步？\n",
    "\n",
    "在 [Variational Autoencoder tutorial](vae.ipynb) 中，我们将会看到如何使用深度神经网络来增强 `scale` 这样的模型，以及使用随机变分推断来建立图像生成模型."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}

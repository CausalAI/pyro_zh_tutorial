{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "# 自定义 SVI 目标函数\n",
    "\n",
    "\n",
    "（Pyro 用 SVI 为贝叶斯推断提供支持）Pyro provides support for various optimization-based approaches to Bayesian inference, with `Trace_ELBO` serving as the basic implementation of SVI (stochastic variational inference). See the [docs](http://docs.pyro.ai/en/dev/inference_algos.html#module-pyro.infer.svi) for more information on the various SVI implementations and SVI \n",
    "tutorials [I](http://pyro.ai/examples/svi_part_i.html), \n",
    "[II](http://pyro.ai/examples/svi_part_ii.html), \n",
    "and [III](http://pyro.ai/examples/svi_part_iii.html) for background on SVI.\n",
    "\n",
    "（本教程将用示例说明如何定制变分目标函数）In this tutorial we show how advanced users can modify and/or augment the variational objectives (alternatively: loss functions) provided by Pyro to support special use cases."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before updated: tensor(8.5000, requires_grad=True) tensor(1., requires_grad=True)\n",
      "After updated: tensor(9.0979, requires_grad=True) tensor(0.6203, requires_grad=True)\n",
      "a =  9.097911834716797\n",
      "b =  0.6202840209007263\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 内容预告\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import torch\n",
    "\n",
    "import pyro\n",
    "import pyro.infer\n",
    "import pyro.optim\n",
    "import pyro.distributions as dist\n",
    "pyro.set_rng_seed(101)\n",
    "mu = 8.5\n",
    "\n",
    "def scale(mu):\n",
    "    weight = pyro.sample(\"weight\", dist.Normal(mu, 1.0))\n",
    "    return pyro.sample(\"measurement\", dist.Normal(weight, 0.75))\n",
    "conditioned_scale = pyro.condition(scale, data={\"measurement\": torch.tensor(9.5)})\n",
    "\n",
    "def scale_parametrized_guide(mu):\n",
    "    a = pyro.param(\"a\", torch.tensor(mu))\n",
    "    b = pyro.param(\"b\", torch.tensor(1.))\n",
    "    return pyro.sample(\"weight\", dist.Normal(a, torch.abs(b)))\n",
    "\n",
    "loss_fn = pyro.infer.Trace_ELBO().differentiable_loss\n",
    "\n",
    "pyro.clear_param_store()\n",
    "\n",
    "with pyro.poutine.trace(param_only=True) as param_capture:\n",
    "    loss = loss_fn(conditioned_scale, scale_parametrized_guide, mu)\n",
    "    loss.backward()\n",
    "params = [site[\"value\"].unconstrained() for site in param_capture.trace.nodes.values()]\n",
    "\n",
    "def step(params):\n",
    "    for x in params:\n",
    "        x.data = x.data - lr * x.grad\n",
    "        x.grad.zero_()\n",
    "\n",
    "print(\"Before updated:\", pyro.param('a'), pyro.param('b'))\n",
    "losses, a,b  = [], [], []\n",
    "lr = 0.001\n",
    "num_steps = 1000\n",
    "for t in range(num_steps):\n",
    "    with pyro.poutine.trace(param_only=True) as param_capture:\n",
    "        loss = loss_fn(conditioned_scale, scale_parametrized_guide, mu)\n",
    "        loss.backward()\n",
    "        losses.append(loss.data)\n",
    "    params = [site[\"value\"].unconstrained() for site in param_capture.trace.nodes.values()]\n",
    "\n",
    "    a.append(pyro.param(\"a\").item())\n",
    "    b.append(pyro.param(\"b\").item())\n",
    "    step(params)\n",
    "print(\"After updated:\", pyro.param('a'), pyro.param('b'))\n",
    "\n",
    "\n",
    "plt.plot(losses)\n",
    "plt.title(\"ELBO\")\n",
    "plt.xlabel(\"step\")\n",
    "plt.ylabel(\"loss\");\n",
    "print('a = ',pyro.param(\"a\").item())\n",
    "print('b = ', pyro.param(\"b\").item())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.subplot(1,2,1)\n",
    "plt.plot([0,num_steps],[9.14,9.14], 'k:')\n",
    "plt.plot(a)\n",
    "plt.ylabel('a')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "plt.ylabel('b')\n",
    "plt.plot([0,num_steps],[0.6,0.6], 'k:')\n",
    "plt.plot(b)\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "## SVI 的基本用法\n",
    "\n",
    "我们首先回顾 Pyro 中 `SVI` objects 的使用方法. We assume that the user\n",
    "has defined a `model` and a `guide`.  The user then creates an optimizer and an `SVI` object:\n",
    "\n",
    "```python\n",
    "optimizer = pyro.optim.Adam({\"lr\": 0.001, \"betas\": (0.90, 0.999)})\n",
    "svi = pyro.infer.SVI(model, guide, optimizer, loss=pyro.infer.Trace_ELBO())\n",
    "```\n",
    "\n",
    "Gradient steps can then be taken with a call to `svi.step(...)`. The arguments to `step()` are then\n",
    "passed to `model` and `guide`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "....................\n",
      "based on the data and our prior belief, the fairness of the coin is 0.534 +- 0.090\n"
     ]
    }
   ],
   "source": [
    "# +++++++++++ 下节预告\n",
    "# 加上一个正则项\n",
    "import math, os, torch, pyro\n",
    "import torch.distributions.constraints as constraints\n",
    "import pyro.distributions as dist\n",
    "from pyro.optim import Adam\n",
    "from pyro.infer import SVI, Trace_ELBO\n",
    "\n",
    "assert pyro.__version__.startswith('1.3.0')\n",
    "pyro.enable_validation(True)\n",
    "pyro.clear_param_store()\n",
    "\n",
    "data = []\n",
    "data.extend([torch.tensor(1.0) for _ in range(6)])\n",
    "data.extend([torch.tensor(0.0) for _ in range(4)])\n",
    "\n",
    "def model(data):\n",
    "    alpha0, beta0 = torch.tensor(10.0), torch.tensor(10.0)\n",
    "    theta = pyro.sample(\"latent_fairness\", dist.Beta(alpha0, beta0))\n",
    "    for i in range(len(data)):\n",
    "        pyro.sample(\"obs_{}\".format(i), dist.Bernoulli(theta), obs=data[i])\n",
    "def guide(data):\n",
    "    alpha_q = pyro.param(\"alpha_q\", torch.tensor(15.0), constraint=constraints.positive)\n",
    "    beta_q = pyro.param(\"beta_q\", torch.tensor(15.0), constraint=constraints.positive)\n",
    "    pyro.sample(\"latent_fairness\", dist.Beta(alpha_q, beta_q))\n",
    "\n",
    "adam_params = {\"lr\": 0.0005, \"betas\": (0.90, 0.999)}\n",
    "optimizer = Adam(adam_params, {\"clip_norm\": 10.0}) # 添加梯度截断\n",
    "# loss_fn = pyro.infer.Trace_ELBO().differentiable_loss # 添加正则项\n",
    "\n",
    "svi = SVI(model, guide, optimizer, loss=Trace_ELBO())\n",
    "\n",
    "n_steps = 2000\n",
    "for step in range(n_steps):\n",
    "    svi.step(data)\n",
    "    if step % 100 == 0:\n",
    "        print('.', end='')\n",
    "\n",
    "alpha_q = pyro.param(\"alpha_q\").item()\n",
    "beta_q = pyro.param(\"beta_q\").item()\n",
    "inferred_mean = alpha_q / (alpha_q + beta_q)\n",
    "factor = beta_q / (alpha_q * (1.0 + alpha_q + beta_q))\n",
    "inferred_std = inferred_mean * math.sqrt(factor)\n",
    "print(\"\\nbased on the data and our prior belief, the fairness \" +\n",
    "      \"of the coin is %.3f +- %.3f\" % (inferred_mean, inferred_std))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "toc-hr-collapsed": true
   },
   "source": [
    "## 修改损失函数\n",
    "\n",
    "The nice thing about the above pattern is that it allows Pyro to take care of various details for us, for example:\n",
    "\n",
    "- `pyro.optim.Adam` dynamically creates a new `torch.optim.Adam` optimizer whenever a new parameter is encountered \n",
    "- `SVI.step()` zeros gradients between gradient steps\n",
    "\n",
    "（直接操作 loss 方法）If we want more control, we can directly manipulate the differentiable loss method of the various `ELBO` classes. For example, (assuming we know all the parameters in advance) this is equivalent to the previous code snippet:\n",
    "\n",
    "```python\n",
    "# define optimizer and loss function\n",
    "optimizer = torch.optim.Adam(my_parameters, {\"lr\": 0.001, \"betas\": (0.90, 0.999)})\n",
    "loss_fn = pyro.infer.Trace_ELBO().differentiable_loss\n",
    "# compute loss\n",
    "loss = loss_fn(model, guide, model_and_guide_args)\n",
    "loss.backward()\n",
    "# take a step and zero the parameter gradients\n",
    "optimizer.step()\n",
    "optimizer.zero_grad()\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "### 添加正则项\n",
    "\n",
    "Suppose we want to add a custom regularization term to the SVI loss. Using the above \n",
    "usage pattern, this is easy to do. First we define our regularizer:\n",
    "\n",
    "```python\n",
    "def my_custom_L2_regularizer(my_parameters):\n",
    "    reg_loss = 0.0\n",
    "    for param in my_parameters:\n",
    "        reg_loss = reg_loss + param.pow(2.0).sum()\n",
    "    return reg_loss  \n",
    "```\n",
    "\n",
    "Then the only change we need to make is:\n",
    "\n",
    "```diff\n",
    "- loss = loss_fn(model, guide)\n",
    "+ loss = loss_fn(model, guide) + my_custom_L2_regularizer(my_parameters)\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "### 梯度截断\n",
    "\n",
    "For some models the loss gradient can explode during training, leading to overflow and \n",
    "`NaN` values. One way to protect against this is with gradient clipping. The optimizers\n",
    "in `pyro.optim` take an optional dictionary of `clip_args` which allows clipping either\n",
    "the gradient norm or the gradient value to fall within the given limit.\n",
    "\n",
    "To change the basic example above:\n",
    "\n",
    "```diff\n",
    "- optimizer = pyro.optim.Adam({\"lr\": 0.001, \"betas\": (0.90, 0.999)})\n",
    "+ optimizer = pyro.optim.Adam({\"lr\": 0.001, \"betas\": (0.90, 0.999)}, {\"clip_norm\": 10.0})\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "### Scaling the Loss\n",
    "\n",
    "Depending on the optimization algorithm, the scale of the loss may or not matter. Suppose \n",
    "we want to scale our loss function by the number of datapoints before we differentiate it.\n",
    "This is easily done:\n",
    "\n",
    "```diff\n",
    "- loss = loss_fn(model, guide)\n",
    "+ loss = loss_fn(model, guide) / N_data\n",
    "```\n",
    "\n",
    "Note that in the case of SVI, where each term in the loss function is a log probability \n",
    "from the model or guide, this same effect can be achieved using [poutine.scale](http://docs.pyro.ai/en/dev/poutine.html#pyro.poutine.scale). For \n",
    "example we can use the `poutine.scale` decorator to scale both the model and guide:\n",
    "\n",
    "```python\n",
    "@poutine.scale(scale=1.0/N_data)\n",
    "def model(...):\n",
    "    pass\n",
    "   \n",
    "@poutine.scale(scale=1.0/N_data)\n",
    "def guide(...):\n",
    "    pass\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "### Mixing Optimizers\n",
    "\n",
    "The various optimizers in `pyro.optim` allow the user to specify optimization settings (e.g. learning rates) on\n",
    "a per-parameter basis. But what if we want to use different optimization algorithms for different parameters? \n",
    "We can do this using Pyro's `MultiOptimizer` (see below), 但是如果我们直接操作`differentiable_loss` 也可以实现相同的目的：\n",
    "\n",
    "```python\n",
    "adam = torch.optim.Adam(adam_parameters, {\"lr\": 0.001, \"betas\": (0.90, 0.999)})\n",
    "sgd = torch.optim.SGD(sgd_parameters, {\"lr\": 0.0001})\n",
    "loss_fn = pyro.infer.Trace_ELBO().differentiable_loss\n",
    "# compute loss\n",
    "loss = loss_fn(model, guide)\n",
    "loss.backward()\n",
    "# take a step and zero the parameter gradients\n",
    "adam.step()\n",
    "sgd.step()\n",
    "adam.zero_grad()\n",
    "sgd.zero_grad()\n",
    "```\n",
    "\n",
    "For completeness, we also show how we can do the same thing using [MultiOptimizer](http://docs.pyro.ai/en/dev/optimization.html?highlight=multi%20optimizer#module-pyro.optim.multi), which allows\n",
    "us to combine multiple Pyro optimizers. Note that since `MultiOptimizer` uses `torch.autograd.grad` under the hood (instead of `torch.Tensor.backward()`), it has a slightly different interface; in particular the `step()` method also takes parameters as inputs.\n",
    "\n",
    "```python\n",
    "def model():\n",
    "    pyro.param('a', ...)\n",
    "    pyro.param('b', ...)\n",
    "    ...\n",
    "  \n",
    "adam = pyro.optim.Adam({'lr': 0.1})\n",
    "sgd = pyro.optim.SGD({'lr': 0.01})\n",
    "optim = MixedMultiOptimizer([(['a'], adam), (['b'], sgd)])\n",
    "with pyro.poutine.trace(param_only=True) as param_capture:\n",
    "    loss = elbo.differentiable_loss(model, guide)\n",
    "params = {'a': pyro.param('a'), 'b': pyro.param('b')}\n",
    "optim.step(loss, params)\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "## 自定义 ELBO 损失函数"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "\n",
    "### Simple ELBO\n",
    "\n",
    "In the previous three examples we bypassed creating a `SVI` object and directly manipulated \n",
    "the differentiable loss function provided by an `ELBO` implementation. Another thing we \n",
    "can do is create custom `ELBO` implementations and pass those into the `SVI` machinery. \n",
    "For example, a simplified version of a `Trace_ELBO` loss function might look as follows:\n",
    "\n",
    "```python\n",
    "# note that simple_elbo takes a model, a guide, and their respective arguments as inputs\n",
    "def simple_elbo(model, guide, *args, **kwargs):\n",
    "    # run the guide and trace its execution\n",
    "    guide_trace = poutine.trace(guide).get_trace(*args, **kwargs)\n",
    "    # run the model and replay it against the samples from the guide\n",
    "    model_trace = poutine.trace(\n",
    "        poutine.replay(model, trace=guide_trace)).get_trace(*args, **kwargs)\n",
    "    # construct the elbo loss function\n",
    "    return -1*(model_trace.log_prob_sum() - guide_trace.log_prob_sum())\n",
    "\n",
    "svi = SVI(model, guide, optim, loss=simple_elbo)\n",
    "```\n",
    "Note that this is basically what the `elbo` implementation in [\"mini-pyro\"](https://github.com/pyro-ppl/pyro/blob/dev/pyro/contrib/minipyro.py) looks like."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "### KL Annealing\n",
    "\n",
    "In the [Deep Markov Model Tutorial](http://pyro.ai/examples/dmm.html) the ELBO variational objective\n",
    "is modified during training. In particular the various KL-divergence terms between latent random\n",
    "variables are scaled downward (i.e. annealed) relative to the log probabilities of the observed data.\n",
    "In the tutorial this is accomplished using `poutine.scale`. We can accomplish the same thing by defining \n",
    "a custom loss function. This latter option is not a very elegant pattern but we include it anyway to \n",
    "show the flexibility we have at our disposal. \n",
    "\n",
    "```python\n",
    "def simple_elbo_kl_annealing(model, guide, *args, **kwargs):\n",
    "    # get the annealing factor and latents to anneal from the keyword\n",
    "    # arguments passed to the model and guide\n",
    "    annealing_factor = kwargs.pop('annealing_factor', 1.0)\n",
    "    latents_to_anneal = kwargs.pop('latents_to_anneal', [])\n",
    "    # run the guide and replay the model against the guide\n",
    "    guide_trace = poutine.trace(guide).get_trace(*args, **kwargs)\n",
    "    model_trace = poutine.trace(\n",
    "        poutine.replay(model, trace=guide_trace)).get_trace(*args, **kwargs)\n",
    "        \n",
    "    elbo = 0.0\n",
    "    # loop through all the sample sites in the model and guide trace and\n",
    "    # construct the loss; note that we scale all the log probabilities of\n",
    "    # samples sites in `latents_to_anneal` by the factor `annealing_factor`\n",
    "    for site in model_trace.values():\n",
    "        if site[\"type\"] == \"sample\":\n",
    "            factor = annealing_factor if site[\"name\"] in latents_to_anneal else 1.0\n",
    "            elbo = elbo + factor * site[\"fn\"].log_prob(site[\"value\"]).sum()\n",
    "    for site in guide_trace.values():\n",
    "        if site[\"type\"] == \"sample\":\n",
    "            factor = annealing_factor if site[\"name\"] in latents_to_anneal else 1.0        \n",
    "            elbo = elbo - factor * site[\"fn\"].log_prob(site[\"value\"]).sum()\n",
    "    return -elbo\n",
    "\n",
    "svi = SVI(model, guide, optim, loss=simple_elbo_kl_annealing)\n",
    "svi.step(other_args, annealing_factor=0.2, latents_to_anneal=[\"my_latent\"])\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  },
  "toc-autonumbering": true
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
